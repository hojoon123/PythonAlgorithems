문제 풀 때 마다 추가하기
하는 법도 적어두면 나중에 까먹었을 때 유용할 듯
bfs만들기 17번줄//dfs만들기 29번줄//링크만들기 43번줄//상하좌우 탐색 53번줄//가중치 조정 72
88 완전,포화 이진트리 // 110 트리 가중치 포함 // 121 트리 루트 찾기










탐색의 경우

bfs 만들기
큐를 이용해서 문제 풀이
def bfs(a):
    q = deque()
    q.append(a)
    while q:
        x = q.popleft()
    의 형태가 일반적



dfs 만들기
def dfs(a):
    if a == 0:
        return
    for i in range(n):
        if 특정조건:
            visited[i] = 1
            특정 값 설정
            dfs(i)
            상황에 따라 visited[i] = 0 dfs 하나 다 털고 월드 방문 내역 초기화 느낌임ㅇㅇ
            갔던 곳을 또 갈 수 있는거지 ㅇㅇ



간선 입력 받아서 링크 만들기
보통 시작할 때 간선 주면 간선을 주면 이렇게 입력받는 것이 일반적
for i in range(n):
    a, b =map(int,input().split())
    link[a - 1].append(b - 1)
    link[b - 1].append(a - 1)
이후에 dfs 타거나 bfs 타서 문제 풀면 됨




상하좌우 탐색 하기
보통 
dx = [1, -1, 0, 0]
dy = [0, 0, 1, -1]
이렇게 두고 탐색하는 것이 일반적 만약에 대각선이 하고싶다거나 좀 특별한 위치가
알고싶다 하면 그거에 맞게 설정하면 됨ㅇㅇ
잘모르겠다 싶으면 nx 손으로 돌려보면 이해가 쉬움
이후에 bfs 나 dfs에서 활용하면 되는데, 보통의 경우엔 좌표 단위로 입력을 받아옴
a, b 라는 좌표 값을 매개변수로 받아오면 그걸 기반으로 해서
queue.append([a, b])
for i in range(4):
    nx = a + dx[i]
    ny = b + dy[i]
이렇게 하면 상하좌우
if 0 <= nx < n and 0 <= ny < n 
이후 이렇게 인덱스에서 벗어나지 않는 걸 기본 조건으로 두고
다른 조건을 추가해서 함수를 완성시킴
이후 world[nx][ny] 를 이용해서 조건 추가

가중치 조정
조건의 우선 순위가 높아야 하면 q.appendleft(nx)
후순위는 그냥 q.append(nx)
예를 들어서 미로를 탐색해보자
0인 곳은 그냥 갈 수 있고 1인 곳은 cnt를 1 추가해야 지나갈 수 있다
최저 코스트로 지나가고 싶다.
맵의 예제
011
111
110
최저 코스트가 3이다 1을 3번 부숴야 하기 때문ㅇㅇ
0001
1000 최저 코스트가 0 이다 1을 부수지 않아도 갈 수 있기 때문ㅇㅇ
이렇게 0 이 우선되어야 한다면 appendleft를 써서 0으로 먼저 갈 수 있도록 해주자


트리
포화이진트리 
높이가 d인 포화 이진 트리의 노드 수는 2^(d+1)-1
리프 갯수를 2^d
높이가 3일 경우 노드 수 15개 리프 8개

완전이진트리
Complete Binary Tree의 노드 갯수가 K개라면, Tree의 높이는 밑이 2인 log(K)보다 작거나 같습니다
시간복잡도 O(log)
높이가 d라면 노드의 수 2^d 이상이고 2^(d + 1)개 미만
높이가 3일 경우  8 <= 노드의 수 <= 15   

트리 집어넣기
if __name__ == '__main__':
    n = int(input())
    tree = {}
    for i in range(n):
        root, left, right = map(str,input().split())
        tree[root] = [left, right]
루트 왼쪽 오른쪽 받아서 차근차근 딕셔너리에 떄려박음


트리 가중치 포함해서 리스트에 입력하기
if __name__ == '__main__':
    n = int(input())
    tree = [[] for i in range(n + 1)]
    dist = [-1] * (n + 1)
    for i in range(n - 1):
        root, child, biase = map(int,input().split())
        tree[root].append([child, biase])
        tree[child].append([root,biase])


트리 루트 찾기
if __name__ == '__main__':
    n = int(input())
    tree = [[] for i in range(n + 1)]
    node = [0] * (n + 1)
    row = [[] for i in range(n + 1)]
    location = 1
    for i in range(n):
        root, left, right = map(int,input().split())
        tree[root].append(left)
        tree[root].append(right)
        node[root] += 1
        if left != -1:
            node[left] += 1
        if right != -1:
            node[right] += 1
    
    for i in range(1, n + 1):
        if node[i] == 1:
            rt = i