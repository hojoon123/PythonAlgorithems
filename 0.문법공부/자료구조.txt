Stack, Queue, Tree, Graph
자주 등장하는 네가지 자료구조
얘네 꼭 알고 가야함 알고리즘 문제도 댕많이 나옴




배열(Array): 가장 기본적인 데이터 구조
생성되는 순간 설정되는 셀에 인덱스 부여
셀의 개수 고정
배열을 기반으로 더 복잡한 자료 구조를 만들 수 있음
ex) stack queue
단점 생성될 때 셀의 개수가 고정되므로
데이터를 저장할 수 있는 메모리의 크기가 고정 되어있음
데이터 추가, 삭제가 비효율적
데이터가 삭제된 후 남은 셀은 빈공간이 되어서
메모리 낭비 매우 심함



스택 큐 둘 다 배열임

스택(Stack) : 배열이 수직으로 쌓여있는 것
배열의 마지막에서부터 차례로 가능 pop
LiFo 
Last In First Out
마지막으로 쌓아올린 것이
가장 먼저 나간다는 것
ex) 브라우저 뒤로가기, 컨트롤 + Z
단점 기억 공간이 부족할 때 데이터를 삽입하면 오버플로가 발생
삭제할 데이터가 없는데 삭제하려 하면 언더 플로가 발생
데이터를 받는 순서대로 정렬되고 메모리의 크기가 동적이나
한 번에 하나의 데이터만 처리할 수 있는 불편함이 있음
예제 221116_BJODS / BJO10828.py


큐(Queue): 줄 서 있는 거임
가장 먼저 들어온 요소가
가장 먼저 나감
FiFo
First In First Out
ex) 이메일 전달, 푸쉬 알림 기능, 쇼핑몰 주문 처리, 콜센터
한 쪽은 삽입만 한 쪽은 삭제만 일어남
시작 부분을 Front 끝 부분을 Rear 라고 함.
메모리의 크기가 동적이며 빠른 런타임이 있지만,
가장 오래된 요소만 가져오고
한 번에 하나의 데이터만 처리 함
예제 221117_BJODS / BJO10845.py

덱(Deque)이 겁나 빠름
덱은 스택, 큐를 골라서 사용할 수 있게 해줌
즉 양쪽 끝에서 삽입, 삭제가 가능하다이거임
appendleft() , append()
pop(), popleft() 이렇게 함수가 있어서 너무좋음
합칠 때도 extend(), extendleft() 이렇게 양쪽으로 가능 굿
import 해서 불러와서 사용하면 속도 훨씬 빨라짐
예제 221117_BJODS / BJO1158.py
예제 221118_BJODS / BJO10866.py
동일한 이름의 다른 파일은 진짜 어마어마한 사람의 코드를 적어놓음
되도록 O(1)로 풀 수 있는지 먼저 체크를 하는게 중요하다고 느낌

연속 리스트(Contiguous List): 연속적인 기억 장소에 데이터 저장되는 자료구조
검색에 용이하지만, 삽입 삭제는 불편
삽입과 삭제의 경우 자료의 이동이 일어나기 때문에 별로 안 좋음
리스트 삭제나 삽입하면 다 움직여야 해서 비효율적이긴 함


연결 리스트(Linked List): 데이터를 임의의 기억공간에 기억시키되,
데이터 항목의 순서에 따라 노드의 포인터를 이용하여 서로 연결시킨 자료구조
데이터 추가와 삭제가 용이
배열처럼 메모리에 연속적으로 위치하지 않고 구조의 재구성 필요 x
메모리를 효율적으로 사용할 수 있어서 대용량 데이터 처리에 적합
근데 연결이 끊어지면 다음 노드를 찾기 어렵고 속도가 느림



그래프(Graph): 정점(Vertex)와 간선(Edge)로 이루어진 데이터 구조
사이클이 없는 그래프를 트리라고 함.
방향 그래프와 무방향 그래프가 있음
새로운 요소 추가, 삭제 용이 구조를 응용하기에 적합
데이터 간에 충돌이 일어날 수도 있음.

자기 루프 (self loop) : 정점에서 진출하는 간선이 곧바로 자기 자신에게 
진입하는 경우 자기 루프를 가졌다라고 표현

사이클 (cycle) : 한 정점에서 출발하여 다시 해당 정점으로 
돌아갈 수 있다면 사이클이 있다고 표현합니다.


트리(Tree): 노드(Node)로 구성된 계층적인 자료구조
최상위 노드(Root)를 만들고 그 아래에 자식을 추가하는 방식
폴더죠? 노드와 노드를 잇는 선을 간선(Edge)라고 함.
같은 부모(Parent) 노드를 가지며 같은 레벨에 있는 노드를 형제(Siblings)
노드라고 하고 자식이 없는 노드를 단말(Terminal)라고 함

https://velog.io/@lonnie4165/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EA%B8%B0%EC%B4%88-%EC%95%84-%EC%9D%B4%EB%9F%B0%EB%9C%BB%EC%9D%B4%EA%B5%AC%EB%82%98